// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateRecord {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createRecord(data: RecordCreateInput!): Record!
  updateRecord(data: RecordUpdateInput!, where: RecordWhereUniqueInput!): Record
  updateManyRecords(data: RecordUpdateManyMutationInput!, where: RecordWhereInput): BatchPayload!
  upsertRecord(where: RecordWhereUniqueInput!, create: RecordCreateInput!, update: RecordUpdateInput!): Record!
  deleteRecord(where: RecordWhereUniqueInput!): Record
  deleteManyRecords(where: RecordWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  record(where: RecordWhereUniqueInput!): Record
  records(where: RecordWhereInput, orderBy: RecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Record]!
  recordsConnection(where: RecordWhereInput, orderBy: RecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecordConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Record {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User
  title: String!
  description: String
  state: String
  totalDischarges: Int
  averageCoveredCharges: Float
  averageTotalPayments: Float
  averageMedicarePayments: Float
}

type RecordConnection {
  pageInfo: PageInfo!
  edges: [RecordEdge]!
  aggregate: AggregateRecord!
}

input RecordCreateInput {
  id: ID
  author: UserCreateOneInput
  title: String!
  description: String
  state: String
  totalDischarges: Int
  averageCoveredCharges: Float
  averageTotalPayments: Float
  averageMedicarePayments: Float
}

type RecordEdge {
  node: Record!
  cursor: String!
}

enum RecordOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  state_ASC
  state_DESC
  totalDischarges_ASC
  totalDischarges_DESC
  averageCoveredCharges_ASC
  averageCoveredCharges_DESC
  averageTotalPayments_ASC
  averageTotalPayments_DESC
  averageMedicarePayments_ASC
  averageMedicarePayments_DESC
}

type RecordPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String
  state: String
  totalDischarges: Int
  averageCoveredCharges: Float
  averageTotalPayments: Float
  averageMedicarePayments: Float
}

type RecordSubscriptionPayload {
  mutation: MutationType!
  node: Record
  updatedFields: [String!]
  previousValues: RecordPreviousValues
}

input RecordSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RecordWhereInput
  AND: [RecordSubscriptionWhereInput!]
  OR: [RecordSubscriptionWhereInput!]
  NOT: [RecordSubscriptionWhereInput!]
}

input RecordUpdateInput {
  author: UserUpdateOneInput
  title: String
  description: String
  state: String
  totalDischarges: Int
  averageCoveredCharges: Float
  averageTotalPayments: Float
  averageMedicarePayments: Float
}

input RecordUpdateManyMutationInput {
  title: String
  description: String
  state: String
  totalDischarges: Int
  averageCoveredCharges: Float
  averageTotalPayments: Float
  averageMedicarePayments: Float
}

input RecordWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  author: UserWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  totalDischarges: Int
  totalDischarges_not: Int
  totalDischarges_in: [Int!]
  totalDischarges_not_in: [Int!]
  totalDischarges_lt: Int
  totalDischarges_lte: Int
  totalDischarges_gt: Int
  totalDischarges_gte: Int
  averageCoveredCharges: Float
  averageCoveredCharges_not: Float
  averageCoveredCharges_in: [Float!]
  averageCoveredCharges_not_in: [Float!]
  averageCoveredCharges_lt: Float
  averageCoveredCharges_lte: Float
  averageCoveredCharges_gt: Float
  averageCoveredCharges_gte: Float
  averageTotalPayments: Float
  averageTotalPayments_not: Float
  averageTotalPayments_in: [Float!]
  averageTotalPayments_not_in: [Float!]
  averageTotalPayments_lt: Float
  averageTotalPayments_lte: Float
  averageTotalPayments_gt: Float
  averageTotalPayments_gte: Float
  averageMedicarePayments: Float
  averageMedicarePayments_not: Float
  averageMedicarePayments_in: [Float!]
  averageMedicarePayments_not_in: [Float!]
  averageMedicarePayments_lt: Float
  averageMedicarePayments_lte: Float
  averageMedicarePayments_gt: Float
  averageMedicarePayments_gte: Float
  AND: [RecordWhereInput!]
  OR: [RecordWhereInput!]
  NOT: [RecordWhereInput!]
}

input RecordWhereUniqueInput {
  id: ID
}

type Subscription {
  record(where: RecordSubscriptionWhereInput): RecordSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
}

input UserUpdateInput {
  name: String
}

input UserUpdateManyMutationInput {
  name: String
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`