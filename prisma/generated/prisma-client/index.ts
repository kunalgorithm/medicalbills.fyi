// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  record: (where?: RecordWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  record: (where: RecordWhereUniqueInput) => RecordNullablePromise;
  records: (args?: {
    where?: RecordWhereInput;
    orderBy?: RecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Record>;
  recordsConnection: (args?: {
    where?: RecordWhereInput;
    orderBy?: RecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RecordConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createRecord: (data: RecordCreateInput) => RecordPromise;
  updateRecord: (args: {
    data: RecordUpdateInput;
    where: RecordWhereUniqueInput;
  }) => RecordPromise;
  updateManyRecords: (args: {
    data: RecordUpdateManyMutationInput;
    where?: RecordWhereInput;
  }) => BatchPayloadPromise;
  upsertRecord: (args: {
    where: RecordWhereUniqueInput;
    create: RecordCreateInput;
    update: RecordUpdateInput;
  }) => RecordPromise;
  deleteRecord: (where: RecordWhereUniqueInput) => RecordPromise;
  deleteManyRecords: (where?: RecordWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  record: (
    where?: RecordSubscriptionWhereInput
  ) => RecordSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type RecordOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "state_ASC"
  | "state_DESC"
  | "totalDischarges_ASC"
  | "totalDischarges_DESC"
  | "averageCoveredCharges_ASC"
  | "averageCoveredCharges_DESC"
  | "averageTotalPayments_ASC"
  | "averageTotalPayments_DESC"
  | "averageMedicarePayments_ASC"
  | "averageMedicarePayments_DESC";

export type UserOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type RecordWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RecordWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  author?: Maybe<UserWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  totalDischarges?: Maybe<Int>;
  totalDischarges_not?: Maybe<Int>;
  totalDischarges_in?: Maybe<Int[] | Int>;
  totalDischarges_not_in?: Maybe<Int[] | Int>;
  totalDischarges_lt?: Maybe<Int>;
  totalDischarges_lte?: Maybe<Int>;
  totalDischarges_gt?: Maybe<Int>;
  totalDischarges_gte?: Maybe<Int>;
  averageCoveredCharges?: Maybe<Float>;
  averageCoveredCharges_not?: Maybe<Float>;
  averageCoveredCharges_in?: Maybe<Float[] | Float>;
  averageCoveredCharges_not_in?: Maybe<Float[] | Float>;
  averageCoveredCharges_lt?: Maybe<Float>;
  averageCoveredCharges_lte?: Maybe<Float>;
  averageCoveredCharges_gt?: Maybe<Float>;
  averageCoveredCharges_gte?: Maybe<Float>;
  averageTotalPayments?: Maybe<Float>;
  averageTotalPayments_not?: Maybe<Float>;
  averageTotalPayments_in?: Maybe<Float[] | Float>;
  averageTotalPayments_not_in?: Maybe<Float[] | Float>;
  averageTotalPayments_lt?: Maybe<Float>;
  averageTotalPayments_lte?: Maybe<Float>;
  averageTotalPayments_gt?: Maybe<Float>;
  averageTotalPayments_gte?: Maybe<Float>;
  averageMedicarePayments?: Maybe<Float>;
  averageMedicarePayments_not?: Maybe<Float>;
  averageMedicarePayments_in?: Maybe<Float[] | Float>;
  averageMedicarePayments_not_in?: Maybe<Float[] | Float>;
  averageMedicarePayments_lt?: Maybe<Float>;
  averageMedicarePayments_lte?: Maybe<Float>;
  averageMedicarePayments_gt?: Maybe<Float>;
  averageMedicarePayments_gte?: Maybe<Float>;
  AND?: Maybe<RecordWhereInput[] | RecordWhereInput>;
  OR?: Maybe<RecordWhereInput[] | RecordWhereInput>;
  NOT?: Maybe<RecordWhereInput[] | RecordWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RecordCreateInput {
  id?: Maybe<ID_Input>;
  author?: Maybe<UserCreateOneInput>;
  title: String;
  description?: Maybe<String>;
  state?: Maybe<String>;
  totalDischarges?: Maybe<Int>;
  averageCoveredCharges?: Maybe<Float>;
  averageTotalPayments?: Maybe<Float>;
  averageMedicarePayments?: Maybe<Float>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface RecordUpdateInput {
  author?: Maybe<UserUpdateOneInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  state?: Maybe<String>;
  totalDischarges?: Maybe<Int>;
  averageCoveredCharges?: Maybe<Float>;
  averageTotalPayments?: Maybe<Float>;
  averageMedicarePayments?: Maybe<Float>;
}

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  name?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface RecordUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  state?: Maybe<String>;
  totalDischarges?: Maybe<Int>;
  averageCoveredCharges?: Maybe<Float>;
  averageTotalPayments?: Maybe<Float>;
  averageMedicarePayments?: Maybe<Float>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface RecordSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RecordWhereInput>;
  AND?: Maybe<RecordSubscriptionWhereInput[] | RecordSubscriptionWhereInput>;
  OR?: Maybe<RecordSubscriptionWhereInput[] | RecordSubscriptionWhereInput>;
  NOT?: Maybe<RecordSubscriptionWhereInput[] | RecordSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Record {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  description?: String;
  state?: String;
  totalDischarges?: Int;
  averageCoveredCharges?: Float;
  averageTotalPayments?: Float;
  averageMedicarePayments?: Float;
}

export interface RecordPromise extends Promise<Record>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  author: <T = UserPromise>() => T;
  title: () => Promise<String>;
  description: () => Promise<String>;
  state: () => Promise<String>;
  totalDischarges: () => Promise<Int>;
  averageCoveredCharges: () => Promise<Float>;
  averageTotalPayments: () => Promise<Float>;
  averageMedicarePayments: () => Promise<Float>;
}

export interface RecordSubscription
  extends Promise<AsyncIterator<Record>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  author: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  totalDischarges: () => Promise<AsyncIterator<Int>>;
  averageCoveredCharges: () => Promise<AsyncIterator<Float>>;
  averageTotalPayments: () => Promise<AsyncIterator<Float>>;
  averageMedicarePayments: () => Promise<AsyncIterator<Float>>;
}

export interface RecordNullablePromise
  extends Promise<Record | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  author: <T = UserPromise>() => T;
  title: () => Promise<String>;
  description: () => Promise<String>;
  state: () => Promise<String>;
  totalDischarges: () => Promise<Int>;
  averageCoveredCharges: () => Promise<Float>;
  averageTotalPayments: () => Promise<Float>;
  averageMedicarePayments: () => Promise<Float>;
}

export interface User {
  id: ID_Output;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface RecordConnection {
  pageInfo: PageInfo;
  edges: RecordEdge[];
}

export interface RecordConnectionPromise
  extends Promise<RecordConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RecordEdge>>() => T;
  aggregate: <T = AggregateRecordPromise>() => T;
}

export interface RecordConnectionSubscription
  extends Promise<AsyncIterator<RecordConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RecordEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRecordSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface RecordEdge {
  node: Record;
  cursor: String;
}

export interface RecordEdgePromise extends Promise<RecordEdge>, Fragmentable {
  node: <T = RecordPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RecordEdgeSubscription
  extends Promise<AsyncIterator<RecordEdge>>,
    Fragmentable {
  node: <T = RecordSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRecord {
  count: Int;
}

export interface AggregateRecordPromise
  extends Promise<AggregateRecord>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRecordSubscription
  extends Promise<AsyncIterator<AggregateRecord>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface RecordSubscriptionPayload {
  mutation: MutationType;
  node: Record;
  updatedFields: String[];
  previousValues: RecordPreviousValues;
}

export interface RecordSubscriptionPayloadPromise
  extends Promise<RecordSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RecordPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RecordPreviousValuesPromise>() => T;
}

export interface RecordSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RecordSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RecordSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RecordPreviousValuesSubscription>() => T;
}

export interface RecordPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  description?: String;
  state?: String;
  totalDischarges?: Int;
  averageCoveredCharges?: Float;
  averageTotalPayments?: Float;
  averageMedicarePayments?: Float;
}

export interface RecordPreviousValuesPromise
  extends Promise<RecordPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  state: () => Promise<String>;
  totalDischarges: () => Promise<Int>;
  averageCoveredCharges: () => Promise<Float>;
  averageTotalPayments: () => Promise<Float>;
  averageMedicarePayments: () => Promise<Float>;
}

export interface RecordPreviousValuesSubscription
  extends Promise<AsyncIterator<RecordPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  totalDischarges: () => Promise<AsyncIterator<Int>>;
  averageCoveredCharges: () => Promise<AsyncIterator<Float>>;
  averageTotalPayments: () => Promise<AsyncIterator<Float>>;
  averageMedicarePayments: () => Promise<AsyncIterator<Float>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Record",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://us1.prisma.sh/kunal-shah-4addb0/medicalbills/dev`
});
export const prisma = new Prisma();
